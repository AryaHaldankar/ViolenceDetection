# -*- coding: utf-8 -*-
"""ViolentDetect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wED2-gcQFvTEGuPMO-S3i2KEiGmh1qpY
"""

#from google.colab import drive
#drive.mount('/content/drive')

import keras
import pandas as pd
import numpy as np
import cv2
import os
import imageio
import math
import random
from keras.applications.resnet_v2 import preprocess_input
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
import tensorflow as tf

"""**Preprocess the images and store them as labled data in csv file.**"""

def video_to_frames(video):
    vidcap = cv2.VideoCapture(video)
    ids = set()
    while len(ids) <= 4:
      ids.add(random.randint(1, vidcap.get(cv2.CAP_PROP_FRAME_COUNT) - 1))

    ImageFrames = []
    for id in ids:
      vidcap.set(cv2.CAP_PROP_POS_FRAMES, id - 1)
      success, image = vidcap.read()

      if success:
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = preprocess_input(image)
        ImageFrames.append(image)
      else:
        print('Failure!!!')

    vidcap.release()

    return ImageFrames

from pathlib import Path

def get_all_file_paths(directory):
    return [str(file) for file in Path(directory).rglob('*') if file.is_file()]

# NonViolence
paths_nonvi = []
paths_vi = []
for i in range(1, 6):
  directory_nonvi = f'data/violent_flow/movies/{i}/NonViolence'
  directory_vi = f'data/violent_flow/movies/{i}/Violence'
  paths_nonvi.extend(get_all_file_paths(directory_nonvi))
  paths_vi.extend(get_all_file_paths(directory_vi))

violence_frames = []
non_violence_frames = []
for path in paths_vi:
  violence_frames.extend(video_to_frames(path))
for path in paths_nonvi:
  non_violence_frames.extend(video_to_frames(path))

print(len(violence_frames))
violence_dataframe = pd.DataFrame({'image': violence_frames, 'y': np.ones(615, dtype = int)})
non_violence_dataframe = pd.DataFrame({'image': non_violence_frames, 'y': np.zeros(615, dtype = int)})
data = pd.concat([violence_dataframe, non_violence_dataframe], ignore_index = True)

shuffled_data = data.sample(frac=1).reset_index(drop=True)

shuffled_data_numpy = shuffled_data.to_numpy()

np.save('data.npy', shuffled_data_numpy)

"""**Transfer train the ResNet model**"""

data = np.load('data.npy', allow_pickle = True)

base_model = keras.applications.ResNet152V2(
    include_top=False,
    weights="imagenet",
    classifier_activation="softmax",
    name="resnet152v2",
)

base_model.trainable = False

inputs = keras.layers.Input(shape = (240, 320, 3))

x = base_model(inputs, training = False)

y = keras.layers.GlobalAveragePooling2D()(x)

outputs = keras.layers.Dense(1, activation = 'sigmoid')(y)

model = keras.Model(inputs, outputs)

model.summary()

x = data[:, 0]
y = data[:, 1]

x_reshaped = np.array([row for row in x])

x_reshaped.shape

x_reshaped_tensor = tf.convert_to_tensor(x_reshaped)

y_reshaped = np.array([row for row in y])

y_reshaped_tensor = tf.convert_to_tensor(y_reshaped)

x_train, x_test, y_train, y_test = train_test_split(x_reshaped, y_reshaped, test_size = 0.2, random_state = 42)

model.compile(
    optimizer=keras.optimizers.Adam(),
    loss=keras.losses.BinaryCrossentropy(from_logits=True),
    metrics=[keras.metrics.BinaryAccuracy()],
)

epochs = 6
model.fit(x_train, y_train, epochs=epochs, batch_size = 32)

model.save('model.keras')

model.evaluate(x_test, y_test, batch_size = 32)

"""**Function to accept video and return how violent it is.**"""

def process_video(video_path):
  vidcap = cv2.VideoCapture(video_path)
  frames = []
  ids = set()
  while len(ids) < 20:
    ids.add(random.randint(1, vidcap.get(cv2.CAP_PROP_FRAME_COUNT)))
  for id in ids:
    vidcap.set(cv2.CAP_PROP_POS_FRAMES, id - 1)
    success, image = vidcap.read()
    if success:
      image = cv2.resize(image, (320, 240))
      image = preprocess_input(image)
      frames.append(image)
    else:
      print('Failure!!!')
  return np.array([row for row in frames])

def video_violence(video_path):
  processed_video = process_video(video_path)
  outputs = model.predict(processed_video)
  return outputs.mean()

base_model = keras.applications.ResNet152V2(
    include_top=False,
    weights=None,
    classifier_activation="softmax",
    name="resnet152v2",
)
inputs = keras.layers.Input(shape = (240, 320, 3))
x = base_model(inputs)
y = keras.layers.GlobalAveragePooling2D()(x)
outputs = keras.layers.Dense(1, activation = 'sigmoid')(y)
model = keras.Model(inputs, outputs)
model.load_weights('model.keras')

#non violent video 0 = non violent, 1 = violent
print(video_violence('data/violent_flow/movies/1/NonViolence/football_crowds__Giants_of_Brazil_6_of_6__anandaliyanage__lq-GBA34iEI.avi'))

#violent video 0 = non violent, 1 = violent
print(video_violence('data/violent_flow/movies/1/Violence/Hooligans_violence__5x5_russian_hooligans_fight__Parkhom__GnfpwW6sMkc.avi'))

